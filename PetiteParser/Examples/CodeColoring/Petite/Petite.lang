# This is a simplified version of the Petite Parser language file language definition
# designed for colorizing the Petite Parser language for the text coloring example.

> (start): ' \r\t\n' => (whitespace): ' \r\t\n' => ^[whitespace];

# The comment is not consumed like it normally is
# so it can be colored without complicating the below grammar.
(start): '#' => (commentBody): !'\n' => (commentBody): '\n' => [comment];

(start): '(' => [openParen];
(start): ')' => [closeParen];
(start): '[' => [openBracket];
(start): ']' => [closeBracket];
(start): '<' => [openAngle];
(start): '>' => [closeAngle];
(start): '{' => [openCurly];
(start): '}' => [closeCurly];

(start): ',|!^*_;' => [symbol];
(start): ':' => (colon): '=' => (symbol);
(colon) => [symbol];
(start): '=' => (equal): '>' => (symbol);
(equal) => [symbol];

(start): '.' => (startRange): '.' => (symbol);

(start): '0'..'9', 'a'..'z', 'A'..'Z', '_.-' => (id);
(id): '0'..'9', 'a'..'z', 'A'..'Z', '_.-' => [id];

(start): "'" => (singleQuote.body): '\\' => (singleQuote.escape): * =>
                (singleQuote.body): !"'" => (singleQuote.body): "'" => [string];

(start): '"' => (doubleQuote.body): '\\' => (doubleQuote.escape): * =>
                (doubleQuote.body): !'"' => (doubleQuote.body): '"' => [string];

* => [error];

> <start> := _
    | <start> <part>;

<part> := [string]  {string}
    | [openParen]   {state}  [id] {state}  [closeParen]   {state}
    | [openBracket] {token}  [id] {token}  [closeBracket] {token}
    | [openAngle]   {term}   [id] {term}   [closeAngle]   {term}
    | [openCurly]   {prompt} [id] {prompt} [closeCurly]   {prompt}
    | [symbol]      {symbol}
    | [openParen]   {symbol}
    | [closeParen]  {symbol}
    | [closeAngle]  {symbol};
